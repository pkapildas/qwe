select weight , FLOOR(weight) as kg, ROUND( (weight - FLOOR(weight)) *1000 ) as gms from mass_table;
#Display the name of students along with their respective scores city of residence
select s.s_name as student_name , m.score as score, d.address_city as city_of_residence from
student s
join marks m on s.s_id = m.s_id
join details d on d.school_id = m.school_id
#Display the number of students who have passed or failed respectively.
select status , count(status) as number_of_students from marks group by status;
Display the name and email address of the student who is an 'IMO finalist'.
select s.s_name as Student_Name , d.email_ID as Email_Address from student s
left join marks m on s.s_id= m.s_id
left join details d on m.school_id = d.school_id where d.accomplishments = 'IMO finalist' ;
#Display the score of those students who have scored more marks than that of a student with student_id 6.
select s.s_id, s.s_name , m.score from student as s
left join marks as m using(s_id)
where m.score >(select score from marks where s_id =6)
#Display the number of students who reside in Bangalore.
select d.address_city, count(d.address_city) as students_resides_in_Banglore from student as s
left join marks as m USING(s_id)
left join details d USING(school_id)
where d.address_city ='Banglore' group by address_city;
Display the name and score of the students who have scored marks between 80 and 90.
select s.s_name as name , m.score as score from student as s
left join marks as m on s.s_id = m.s_id where m.score between 80 and 90;
Name the course and the location, where on average, the CGPA is more than 7.5.
select distinct course , address as location from ( select course, address, AVG(CGPA)
OVER(PARTITION BY course, address) AS avg_cgpa from student2 ) as t
where avg_cgpa >7.5;
List the names of the students who have enrolled in more than one course and are from
â€˜Bangaloreâ€™.
select vname as Name , count(vname) from student2 where address='Bangalore' group by vname
having count(vname) >1 
Display the name of toppers in each course ordered by the highest CGPA first.
select vname as name, course , MAX(CGPA) as TOP_CGPA from student2
group by course order by TOP_CGPA DESC ;
List the courses under each semester where none of the students scored less than 5.
select course, semester from student2 group by semester , course having min(CGPA) >=5
 ------ 8. Display employee_id, first_name, salary, department_id for department_id 60 and 90 using Set operators. (2 Marks)
SELECT employee_id, first_name, salary,department_id
FROM employees
WHERE department_id=60
UNION
SELECT employee_id, first_name, salary,department_id
FROM employees
WHERE department_id=90
ORDER BY 3;
select * from employees;
----- 9. Display 2th highest salary of employee using subquery . (3 Mark)"
select min(salary ) 
from (select salary from employees order by salary desc limit 2)a;
----10. Write a query to fetch the employee ID, First Name, Last Name, Salary and Department ID of those employees who draw a salary more than the average salary of their respective department. (2 Mark)
	SELECT employee_id, first_name, last_name,salary,department_id FROM employees e
	WHERE salary > ANY  (SELECT avg(salary) FROM employees WHERE e.department_id  = department_id ) ORDER BY department_id ; 
----16. Write a DDL Statement to create the below table  (5 marks)

	Table name :	Course 
	Columns/Attributes	Datatype
	Course_ID             Int
	Course_Name 		  Varchar(10) 
	course_duration 	  int 
	course_title 		  varchar(20) 
	course_start_date 	  date

-- Create a check constraint on column course_duration should be less than or equal to 21.
-- Create a check constraint on course_title should be in 'Python','SQL','STATS'

-- Solution

CREATE TABLE COURSE
(
Course_ID Int,
Course_Name Varchar(10) ,
course_duration int CHECK (course_duration <= 21),
course_title varchar(20) check (course_title in ('Python','SQL','STATS')),
course_start_date date);








