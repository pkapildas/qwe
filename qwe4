#!dir
# Read the dataset (Assuming a CSV file is used)
#data = pd.read_csv("retail_sales.csv", parse_dates=['ds'], index_col='ds')
data = pd.read_csv('data_set (1).csv')
df1 = data.copy()
print("-------------Dataset Overview----------------")
print(data.info())
print('\n---------- Sample data ----\n')
print(df1.head(2))

#------------ (2) fix the date column -------------------------
#Monthly data : date range, sat, sun holiday
df1['Date'] = pd.to_datetime(df1['Date'], format = '%d-%m-%Y' , errors = 'coerce') 
df1 = df1.sort_values('Date')
df1 = df1.set_index('Date')

#------------ (3) Check for missing values --------------------
print("\n-------Missing Values-------")
print(df1.isnull().sum())

#-------------(4) Copy the cleaned data ----------------------
df3 = df1.copy()  # to be used later

#------------ (4) # Section B - Decompose the time series -----------
print(df1.head())
model_add = seasonal_decompose(df1, model = 'add')  ;
model_add.plot();

model_mul = seasonal_decompose(df1, model = 'mul')  ;
model_mul.plot();

#------------ (4) # Section B - # Perform Dickey-Fuller Test
def adf_test(series):
    result = adfuller(series)
    #print('ADF Statistic:', result[0])
    print('p-value:', result[1])
    if result[1] > 0.05:
        print("The series is non-stationary.")
        return 0
    else:
        print("The series is stationary.")
        return 1
a = adf_test(df1)

# If non-stationary, take first difference

if a == 0: 
    # If non-stationary, take first difference
    df1_diff = df1.diff().dropna()
    adf_test(df1_diff)

#------------ (4) # Section B - # Plot ACF and PACF
plot_acf(df1,lags=20)
plt.show();

plot_pacf(df1,lags=20)
plt.show();

xtrain = df1[~((df1.index.month>7) & (df1.index.year == 2020))]
xtest = df1[ ((df1.index.month>7) & (df1.index.year == 2020))]
print('train data\n',xtrain.head())
print('test data\n',xtest.head())

# Define possible values for p, d, q    #GRID SEARCH
p = range(1,3) #10  # Autoregressive terms
d = range(1,2)  # Differencing terms
q = range(1,3) #10 # Moving Average terms

# Create all possible combinations
pdq = list(itertools.product(p, d, q))
print('\n----------the possible combinations------\n',pdq[:3])

ls_a = []
for i in pdq:
    model = ARIMA(xtrain, order=i)
    model_fit = model.fit()
    ls_a.append({'pdq': i, 'AIC' : model_fit.aic })
df_model = pd.DataFrame(ls_a)

#print('\n----------Check which is lowest to fit in xtrain------')
#df_model.sort_values('AIC').head()

# Select the best model based on the lowest AIC
best_order = df_model.sort_values('AIC').iloc[0]['pdq']
#print(f"Best ARIMA order based on AIC: {best_order}")

# Fit the best ARIMA model
best_model = ARIMA(xtrain, order=  best_order) #(8,1,9)
best_model_fit_arima = best_model.fit()
print(best_model_fit_arima.summary() ) 
forecast = best_model_fit_arima.forecast(steps=len(xtest))   # predict for mothly
a = np.sqrt(mean_squared_error(xtest,forecast)) ; 
b = (mean_absolute_percentage_error(xtest, forecast)) * 100 
print("ARIMA Model RMSE:", a)
print("ARIMA Model MAPE:", b)

# NOT ASKED -----------Convert forecast to DataFrame
# forecast_df = pd.DataFrame(forecast, index=xtest.index, columns=['Forecast'])
# print(forecast_df.head()) # Display forecasted values

xtrain = df1[~((df1.index.month>7) & (df1.index.year == 2020))]
xtest = df1[ ((df1.index.month>7) & (df1.index.year == 2020))]
def fun_seasionality(p1, p2 , df_chk):
    exp_1=ExponentialSmoothing(xtrain,trend= p1 ,seasonal= p2 ,seasonal_periods=7)
    result_1 =    exp_1.fit(optimized=True)    ; 
    y_pred   = result_1.predict(start=len(xtrain),end=len(xtrain)+len(xtest)-1)

    #qqplot(result_1.resid,line='45',fit=True)  ; plt.show()
    a = np.sqrt(mean_squared_error(xtest,y_pred)) ; 
    b = (mean_absolute_percentage_error(xtest, y_pred)) * 100 

    new_row = pd.DataFrame({
        "Model": ["EXPONENTIAL"],
        "Trend": [p1],
        "Seasonality": [p2],
        "RMSE": [a],
        "MAPE (%)": [b]
    })
    df_chk = pd.concat([df_chk, new_row], ignore_index=True)
    return df_chk
    #result_1.summary()


df_chk=pd.DataFrame()
df_chk = fun_seasionality('mul', 'add', df_chk);
df_chk = fun_seasionality('mul', 'mul', df_chk);
df_chk = fun_seasionality('add', 'add', df_chk);
df_chk = fun_seasionality('add', 'mul', df_chk);
df_chk

#Dynamic Inference pending

## imputing using rolling mean
daily = df4.fillna(df4.rolling(6,min_periods=1).mean())


## imputing using interpolation
df4_imputed= df4.interpolate(method = 'linear')




